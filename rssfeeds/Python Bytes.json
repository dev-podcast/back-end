{"title":["#37 Rule over the shells with Sultan"],"link":["\n            https://pythonbytes.fm/episodes/show/37/rule-over-the-shells-with-sultan"],"guid":["7c42c762-c79f-4c9b-9bb7-8d2e42dcda76"],"description":["<p><strong>Brian #1:</strong> <a href=\"https://devguide.python.org/\"><strong>New URL for Python Developer’s Guide</strong></a></p>\n\n<ul>\n<li>How to contribute to CPython</li>\n</ul>\n\n<p>Some really useful links that I hadn’t noticed before. Also great ideas to include in a contributing guide for any large open source project:</p>\n\n<ul>\n<li>Core developers and contributors alike will find the following guides useful:\n<ul>\n<li><a href=\"https://opensource.guide/how-to-contribute/\">How to Contribute to Open Source</a> (from https://opensource.guide)</li>\n<li><a href=\"https://opensource.guide/building-community/\">Building Welcoming Communities</a> (from https://opensource.guide)</li>\n</ul></li>\n<li>Guide for contributing to Python:\n<ul>\n<li><a href=\"https://devguide.python.org/setup/\">Getting Started</a></li>\n<li><a href=\"https://devguide.python.org/help/\">Where to Get Help</a></li>\n<li><a href=\"https://devguide.python.org/pullrequest/\">Lifecycle of a Pull Request</a></li>\n<li><a href=\"https://devguide.python.org/runtests/\">Running &amp; Writing Tests</a></li>\n<li>Beginner tasks to become familiar with the development process</li>\n<li><a href=\"https://devguide.python.org/docquality/\">Helping with Documentation</a></li>\n<li><a href=\"https://devguide.python.org/coverage/\">Increase Test Coverage</a></li>\n<li>Advanced tasks for once you are comfortable</li>\n<li><a href=\"https://devguide.python.org/silencewarnings/\">Silence Warnings From the Test Suite</a></li>\n<li>Fixing issues found by the <a href=\"https://devguide.python.org/buildbots/\">buildbots</a></li>\n<li><a href=\"https://devguide.python.org/fixingissues/\">Fixing “easy” Issues (and Beyond)</a></li>\n<li><a href=\"https://devguide.python.org/tracker/#tracker\">Using the Issue Tracker</a> and <a href=\"https://devguide.python.org/tracker/#helptriage\">Helping Triage Issues</a></li>\n<li><a href=\"https://devguide.python.org/triaging/\">Triaging an Issue</a></li>\n<li><a href=\"https://devguide.python.org/experts/\">Experts Index</a></li>\n<li><a href=\"https://devguide.python.org/communication/\">Following Python’s Development</a></li>\n<li><a href=\"https://devguide.python.org/coredev/\">How to Become a Core Developer</a></li>\n<li><a href=\"https://devguide.python.org/committing/\">Committing and Pushing Changes</a></li>\n<li><a href=\"https://devguide.python.org/devcycle/\">Development Cycle</a></li>\n<li><a href=\"https://devguide.python.org/buildbots/\">Continuous Integration</a></li>\n<li><a href=\"https://devguide.python.org/gitbootcamp/\">Git Bootcamp and Cheat Sheet</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://sultan.readthedocs.io/en/latest/\"><strong>Sultan: Command and Rule Over Your Shell</strong></a></p>\n\n<ul>\n<li>Python package for interfacing with command-line utilities, like yum, apt-get, or ls, in a Pythonic manner</li>\n</ul>\n\n<p>Simple example</p>\n\n<pre><code>from sultan.api import Sultan\ns = Sultan()\ns.sudo(\"yum install -y tree\").run()\n</code></pre>\n\n<p>Better in a context manager:</p>\n\n<pre><code>from sultan.api import Sultan\n\nwith Sultan.load(sudo=True) as s:\n  s.yum(\"install -y tree\").run()\n</code></pre>\n\n<p>Even works remotely:</p>\n\n<pre><code>from sultan.api import Sultan\n\nwith Sultan.load(sudo=True, hostname=\"myserver.com\") as sultan:\n  sultan.yum(\"install -y tree\").run()\n</code></pre>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/dreadatour/Flake8Lint\"><strong>Flake8Lint</strong></a></p>\n\n<ul>\n<li>Sublime Text plugin for lint Python files.</li>\n<li>Includes these linters and style checkers:\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/flake8\"><strong>Flake8</strong></a> (used in \"Python Flake8 Lint\") is a wrapper around these tools:</li>\n<li><a href=\"http://pypi.python.org/pypi/pep8\"><strong>pep8</strong></a> is a tool to check your Python code against some of the style conventions in <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a>.</li>\n<li><a href=\"https://launchpad.net/pyflakes\"><strong>PyFlakes</strong></a> checks only for logical errors in programs; it does not perform any check on style.</li>\n<li><a href=\"http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html\"><strong>mccabe</strong></a> is a code complexity checker. It is quite useful to detect over-complex code. According to McCabe, anything that goes beyond 10 is too complex. See <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">Cyclomatic_complexity</a>.</li>\n<li>There are additional tools used to lint Python files:</li>\n<li><a href=\"https://github.com/PyCQA/pydocstyle\"><strong>pydocstyle</strong></a> is a static analysis tool for checking compliance with Python <a href=\"http://www.python.org/dev/peps/pep-0257/\">PEP257</a>.</li>\n<li><a href=\"https://github.com/flintwork/pep8-naming\"><strong>pep8-naming</strong></a> is a naming convention checker for Python.</li>\n<li><a href=\"https://github.com/JBKahn/flake8-debugger\"><strong>flake8-debugger</strong></a> is a flake8 debug statement checker.</li>\n<li><a href=\"https://github.com/public/flake8-import-order\"><strong>flake8-import-order</strong></a> is a flake8 plugin that checks import order in the fashion of the Google Python Style Guide (turned off by default).</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/warner/magic-wormhole\"><strong>Magic Wormhole</strong></a></p>\n\n<ul>\n<li>Get things from one computer to another, safely.</li>\n<li>A library and a command-line tool named <code>wormhole</code>, which makes it possible to get arbitrary-sized files and directories (or short pieces of text) from one computer to another.</li>\n<li>The two endpoints are identified by using identical \"wormhole codes”</li>\n<li>Video from PyCon 2016: <a href=\"https://www.youtube.com/watch?v=oFrTqQw0_3c\">https://www.youtube.com/watch?v=oFrTqQw0_3c</a></li>\n<li>The codes are short and human-pronounceable, using a phonetically-distinct wordlist.</li>\n<li>As a library too: The wormhole module makes it possible for other applications to use these code-protected channels. </li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://realpython.com/blog/python/python-virtual-environments-a-primer/\"><strong>Python Virtual Environments Primer</strong></a></p>\n\n<ul>\n<li>why do we need virtual environments</li>\n<li>what are they</li>\n<li>how to use them / how do they work</li>\n<li>also\n<ul>\n<li>virtualenvwrapper</li>\n<li>using different versions of python</li>\n<li>pyvenv</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://www.infoworld.com/article/3208391/python/how-rust-can-replace-c-with-pythons-help.html\"><strong>How Rust can replace C, with Python's help</strong></a></p>\n\n<ul>\n<li>Why Rust? Rust has\n<ul>\n<li>a type system feature that helps eliminate memory leaks,</li>\n<li>proper interfaces, called 'traits',</li>\n<li>better type inference,</li>\n<li>better support for concurrency,</li>\n<li>(almost) first-class functions that can be passed as arguments.</li>\n</ul></li>\n<li>It isn’t difficult to expose Rust code to Python. A Rust library can expose a C ABI (application binary interface) to Python without too much work. </li>\n<li>Some Rust crates (as Rust packages are called) already expose Python bindings to make them useful in Python.</li>\n<li>A new spate of projects are making it easier to develop Rust libraries with convenient bindings to Python – and to deploy Python packages that have Rust binaries</li>\n<li><a href=\"https://github.com/dgrunwald/rust-cpython\"><strong>Rust-CPython</strong></a><strong>:</strong> \n<ul>\n<li><strong>What it is:</strong> A set of bindings in Rust for the CPython runtime. This allows a Rust program to connect to CPython, use its ABI, run Python programs through it, and work with representations of Python objects in Rust itself.</li>\n<li><strong>Who it’s for:</strong> Rust programmers who want to hook into CPython and control it from the inside out.</li>\n</ul></li>\n<li><a href=\"https://github.com/PyO3/PyO3\"><strong>PyO3</strong></a>\n<ul>\n<li><strong>What it is:</strong> For Rust developers, the PyO3 project provides a basic way to write Rust software with bindings to Python in both directions. A Rust program can interface with Python objects and the Python interpreter, and can expose Rust methods to a Python program in the same way a C module does.</li>\n<li><strong>Who it’s for:</strong> Those writing modules that work closely with the Python runtime, and need to interact directly with it.</li>\n</ul></li>\n<li><a href=\"https://github.com/mitsuhiko/snaek/\"><strong>Snaek</strong></a>\n<ul>\n<li><strong>What it is:</strong> Another project in the early stages, Snaek lets developers create Rust libraries that are loaded dynamically into Python as needed, but don’t rely on being linked statically against Python’s runtime.</li>\n<li>Doesn’t use CTypes but CFFI</li>\n<li><strong>Who it’s for:</strong> Those who want to expose methods written in Rust to a Python script, or for Rust developers who don’t want or need to become familiar with Python.</li>\n</ul></li>\n<li>And there is a cookiecutter project / template too\n<ul>\n<li><a href=\"https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish\">https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish</a></li>\n<li>“A very important goal of the project,” writes its maintainers, “is that it be able to produce a binary distribution (Wheel) which will not require the end user to actually compile the Rust code themselves.”</li>\n</ul></li>\n</ul>\n"],"enclosure":[{"$":{"url":"https://pythonbytes.fm/episodes/download/37/rule-over-the-shells-with-sultan.mp3","length":"13634489","type":"audio/mpeg"}}],"category":["Technology"],"pubDate":["Wed, 02 Aug 2017 00:00:00 -0800"],"itunes:author":["Michael Kennedy (@mkennedy)"],"itunes:explicit":["No"],"itunes:subtitle":[""],"itunes:summary":["<p><strong>Brian #1:</strong> <a href=\"https://devguide.python.org/\"><strong>New URL for Python Developer’s Guide</strong></a></p>\n\n<ul>\n<li>How to contribute to CPython</li>\n</ul>\n\n<p>Some really useful links that I hadn’t noticed before. Also great ideas to include in a contributing guide for any large open source project:</p>\n\n<ul>\n<li>Core developers and contributors alike will find the following guides useful:\n<ul>\n<li><a href=\"https://opensource.guide/how-to-contribute/\">How to Contribute to Open Source</a> (from https://opensource.guide)</li>\n<li><a href=\"https://opensource.guide/building-community/\">Building Welcoming Communities</a> (from https://opensource.guide)</li>\n</ul></li>\n<li>Guide for contributing to Python:\n<ul>\n<li><a href=\"https://devguide.python.org/setup/\">Getting Started</a></li>\n<li><a href=\"https://devguide.python.org/help/\">Where to Get Help</a></li>\n<li><a href=\"https://devguide.python.org/pullrequest/\">Lifecycle of a Pull Request</a></li>\n<li><a href=\"https://devguide.python.org/runtests/\">Running &amp; Writing Tests</a></li>\n<li>Beginner tasks to become familiar with the development process</li>\n<li><a href=\"https://devguide.python.org/docquality/\">Helping with Documentation</a></li>\n<li><a href=\"https://devguide.python.org/coverage/\">Increase Test Coverage</a></li>\n<li>Advanced tasks for once you are comfortable</li>\n<li><a href=\"https://devguide.python.org/silencewarnings/\">Silence Warnings From the Test Suite</a></li>\n<li>Fixing issues found by the <a href=\"https://devguide.python.org/buildbots/\">buildbots</a></li>\n<li><a href=\"https://devguide.python.org/fixingissues/\">Fixing “easy” Issues (and Beyond)</a></li>\n<li><a href=\"https://devguide.python.org/tracker/#tracker\">Using the Issue Tracker</a> and <a href=\"https://devguide.python.org/tracker/#helptriage\">Helping Triage Issues</a></li>\n<li><a href=\"https://devguide.python.org/triaging/\">Triaging an Issue</a></li>\n<li><a href=\"https://devguide.python.org/experts/\">Experts Index</a></li>\n<li><a href=\"https://devguide.python.org/communication/\">Following Python’s Development</a></li>\n<li><a href=\"https://devguide.python.org/coredev/\">How to Become a Core Developer</a></li>\n<li><a href=\"https://devguide.python.org/committing/\">Committing and Pushing Changes</a></li>\n<li><a href=\"https://devguide.python.org/devcycle/\">Development Cycle</a></li>\n<li><a href=\"https://devguide.python.org/buildbots/\">Continuous Integration</a></li>\n<li><a href=\"https://devguide.python.org/gitbootcamp/\">Git Bootcamp and Cheat Sheet</a></li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #2:</strong> <a href=\"https://sultan.readthedocs.io/en/latest/\"><strong>Sultan: Command and Rule Over Your Shell</strong></a></p>\n\n<ul>\n<li>Python package for interfacing with command-line utilities, like yum, apt-get, or ls, in a Pythonic manner</li>\n</ul>\n\n<p>Simple example</p>\n\n<pre><code>from sultan.api import Sultan\ns = Sultan()\ns.sudo(\"yum install -y tree\").run()\n</code></pre>\n\n<p>Better in a context manager:</p>\n\n<pre><code>from sultan.api import Sultan\n\nwith Sultan.load(sudo=True) as s:\n  s.yum(\"install -y tree\").run()\n</code></pre>\n\n<p>Even works remotely:</p>\n\n<pre><code>from sultan.api import Sultan\n\nwith Sultan.load(sudo=True, hostname=\"myserver.com\") as sultan:\n  sultan.yum(\"install -y tree\").run()\n</code></pre>\n\n<p><strong>Brian #3:</strong> <a href=\"https://github.com/dreadatour/Flake8Lint\"><strong>Flake8Lint</strong></a></p>\n\n<ul>\n<li>Sublime Text plugin for lint Python files.</li>\n<li>Includes these linters and style checkers:\n<ul>\n<li><a href=\"http://pypi.python.org/pypi/flake8\"><strong>Flake8</strong></a> (used in \"Python Flake8 Lint\") is a wrapper around these tools:</li>\n<li><a href=\"http://pypi.python.org/pypi/pep8\"><strong>pep8</strong></a> is a tool to check your Python code against some of the style conventions in <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP8</a>.</li>\n<li><a href=\"https://launchpad.net/pyflakes\"><strong>PyFlakes</strong></a> checks only for logical errors in programs; it does not perform any check on style.</li>\n<li><a href=\"http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html\"><strong>mccabe</strong></a> is a code complexity checker. It is quite useful to detect over-complex code. According to McCabe, anything that goes beyond 10 is too complex. See <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">Cyclomatic_complexity</a>.</li>\n<li>There are additional tools used to lint Python files:</li>\n<li><a href=\"https://github.com/PyCQA/pydocstyle\"><strong>pydocstyle</strong></a> is a static analysis tool for checking compliance with Python <a href=\"http://www.python.org/dev/peps/pep-0257/\">PEP257</a>.</li>\n<li><a href=\"https://github.com/flintwork/pep8-naming\"><strong>pep8-naming</strong></a> is a naming convention checker for Python.</li>\n<li><a href=\"https://github.com/JBKahn/flake8-debugger\"><strong>flake8-debugger</strong></a> is a flake8 debug statement checker.</li>\n<li><a href=\"https://github.com/public/flake8-import-order\"><strong>flake8-import-order</strong></a> is a flake8 plugin that checks import order in the fashion of the Google Python Style Guide (turned off by default).</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #4:</strong> <a href=\"https://github.com/warner/magic-wormhole\"><strong>Magic Wormhole</strong></a></p>\n\n<ul>\n<li>Get things from one computer to another, safely.</li>\n<li>A library and a command-line tool named <code>wormhole</code>, which makes it possible to get arbitrary-sized files and directories (or short pieces of text) from one computer to another.</li>\n<li>The two endpoints are identified by using identical \"wormhole codes”</li>\n<li>Video from PyCon 2016: <a href=\"https://www.youtube.com/watch?v=oFrTqQw0_3c\">https://www.youtube.com/watch?v=oFrTqQw0_3c</a></li>\n<li>The codes are short and human-pronounceable, using a phonetically-distinct wordlist.</li>\n<li>As a library too: The wormhole module makes it possible for other applications to use these code-protected channels. </li>\n</ul>\n\n<p><strong>Brian #5:</strong> <a href=\"https://realpython.com/blog/python/python-virtual-environments-a-primer/\"><strong>Python Virtual Environments Primer</strong></a></p>\n\n<ul>\n<li>why do we need virtual environments</li>\n<li>what are they</li>\n<li>how to use them / how do they work</li>\n<li>also\n<ul>\n<li>virtualenvwrapper</li>\n<li>using different versions of python</li>\n<li>pyvenv</li>\n</ul></li>\n</ul>\n\n<p><strong>Michael #6:</strong> <a href=\"http://www.infoworld.com/article/3208391/python/how-rust-can-replace-c-with-pythons-help.html\"><strong>How Rust can replace C, with Python's help</strong></a></p>\n\n<ul>\n<li>Why Rust? Rust has\n<ul>\n<li>a type system feature that helps eliminate memory leaks,</li>\n<li>proper interfaces, called 'traits',</li>\n<li>better type inference,</li>\n<li>better support for concurrency,</li>\n<li>(almost) first-class functions that can be passed as arguments.</li>\n</ul></li>\n<li>It isn’t difficult to expose Rust code to Python. A Rust library can expose a C ABI (application binary interface) to Python without too much work. </li>\n<li>Some Rust crates (as Rust packages are called) already expose Python bindings to make them useful in Python.</li>\n<li>A new spate of projects are making it easier to develop Rust libraries with convenient bindings to Python – and to deploy Python packages that have Rust binaries</li>\n<li><a href=\"https://github.com/dgrunwald/rust-cpython\"><strong>Rust-CPython</strong></a><strong>:</strong> \n<ul>\n<li><strong>What it is:</strong> A set of bindings in Rust for the CPython runtime. This allows a Rust program to connect to CPython, use its ABI, run Python programs through it, and work with representations of Python objects in Rust itself.</li>\n<li><strong>Who it’s for:</strong> Rust programmers who want to hook into CPython and control it from the inside out.</li>\n</ul></li>\n<li><a href=\"https://github.com/PyO3/PyO3\"><strong>PyO3</strong></a>\n<ul>\n<li><strong>What it is:</strong> For Rust developers, the PyO3 project provides a basic way to write Rust software with bindings to Python in both directions. A Rust program can interface with Python objects and the Python interpreter, and can expose Rust methods to a Python program in the same way a C module does.</li>\n<li><strong>Who it’s for:</strong> Those writing modules that work closely with the Python runtime, and need to interact directly with it.</li>\n</ul></li>\n<li><a href=\"https://github.com/mitsuhiko/snaek/\"><strong>Snaek</strong></a>\n<ul>\n<li><strong>What it is:</strong> Another project in the early stages, Snaek lets developers create Rust libraries that are loaded dynamically into Python as needed, but don’t rely on being linked statically against Python’s runtime.</li>\n<li>Doesn’t use CTypes but CFFI</li>\n<li><strong>Who it’s for:</strong> Those who want to expose methods written in Rust to a Python script, or for Rust developers who don’t want or need to become familiar with Python.</li>\n</ul></li>\n<li>And there is a cookiecutter project / template too\n<ul>\n<li><a href=\"https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish\">https://github.com/mckaymatt/cookiecutter-pypackage-rust-cross-platform-publish</a></li>\n<li>“A very important goal of the project,” writes its maintainers, “is that it be able to produce a binary distribution (Wheel) which will not require the end user to actually compile the Rust code themselves.”</li>\n</ul></li>\n</ul>\n"],"itunes:duration":["00:18:15"],"itunes:keywords":["\n                python, pycharm, python3,software, programming, web, web development, developer, ide,\n                podcast, open source, news, headlines, education,\n                software developer, data science, science, cloud computing\n            "]}