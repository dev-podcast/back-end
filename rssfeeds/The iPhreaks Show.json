{"title":["209 iPS Vapor with Bob Snyder"],"link":["https://devchat.tv/iphreaks/ips-209-vapor-bob-synder"],"pubDate":["Thu, 03 Aug 2017 06:00:00 -0400"],"description":["<h2 style=\"text-align: center;\"><strong>iPS 209: Vapor with Bob Snyder</strong></h2>\r\n\r\n<p>On today&#39;s episode of iPhreaks, Andrew Madsen and Jaim Zuber talk about Vapor<strong>&nbsp;</strong>with Bob Snyder. Bob is on the show today to discuss the structure of Vapor and web app deployment, etc. Don&#39;t miss this one!</p>\r\n\r\n<p><strong>[00:01:20] &ndash; Introduction on Vapor</strong></p>\r\n\r\n<p>Vapor is a server-side Swift framework. It came out two months after Swift became open-source. A couple of weeks ago, they just released Vapor 2.0. It&rsquo;s a big jump from 1.5. Swift has protocols and has incredible performance as compared to Objective-C and other languages like JavaScript. It deserves more attention.</p>\r\n\r\n<p><strong>[00:02:30] &ndash; Back-end development before Vapor</strong></p>\r\n\r\n<p>Bob is a former graphic designer. He went to a boot camp last year and made that career shift. The boot camp focused on Python and iOS but that was all front-end for apps.</p>\r\n\r\n<p>Right now, he is a full-stack developer for a start-up called Crew and he works on Objective-C and Python, and Python Django for the backend. You can deploy, build, and have a production-ready server-side Swift application but you probably want to keep it for a small to mid-size projects. It&rsquo;s not quite enterprise-level yet.</p>\r\n\r\n<p><strong>[00:03:35] &ndash; Swift vs. Python</strong></p>\r\n\r\n<p>Besides the curly brackets, Bob also loves the Swift protocols. With these protocols, you can apply pretty much different attributes to a class. Working with Xcode and protocols, it gives you good practices for building applications. It&rsquo;s also type-safe. When it comes to making variables, knowing that you&rsquo;re keeping the same type of values is very important. That&rsquo;s actually one of the reasons why the performance is better than JavaScript that isn&rsquo;t type-safe.</p>\r\n\r\n<p><strong>[00:04:45] &ndash; Projects with Vapor</strong></p>\r\n\r\n<p>Bob has a project with his friend, and they&rsquo;re making it open-source. It&rsquo;s a web-based application where you just insult your friends and maybe insult you back. It goes back and forth. In doing that, what allowed Bob to really explore is how easy it is to set up relationships for your database inside Swift versus something else like Python.</p>\r\n\r\n<p><strong>[00:05:40] &ndash; Structure of Vapor</strong></p>\r\n\r\n<p>You have the Droplet which is your entire application. It&rsquo;s where everything comes down to. That is your server. Everything else just kind of relates to that. You have the Vapor Nodes, which is going to be your central point for all of your data types. The real premise of the server is you have information that you take from outside, get request, you process them, and most of the time that you&rsquo;re sending it to the database or returning it without going to the database. Each one of those parts to this environment generally takes a lot of interaction to get information for one piece to the next. That&rsquo;s what vapor nodes kind of comes into play. It makes using that data very easy.</p>\r\n\r\n<p><strong>[00:06:30] &ndash; Node</strong></p>\r\n\r\n<p>A node is a class that has protocols built on top of it. If you want to return a JSON object with a request that you got, you can immediately spit out a JSON object. You get some information from the database. It&rsquo;s basically a converter that you can return almost any format that you will need inside of Vapor.</p>\r\n\r\n<p><strong>[00:08:25] &ndash; Fluent</strong></p>\r\n\r\n<p>Nodes interact with Fluent. It allows Vapor to communicate with whatever database you&rsquo;re using. It makes it easy to go from Vapor to a MySQL, a Postgre, or a MongoDB database. You can have a basic server. You&rsquo;re going to have the Droplet. You&rsquo;re going to have the information you want to get into a Node. And then, you&rsquo;re going to send that information to Fluent. Then, Fluent will communicate your profile of the database. That will send on to the actual database. If you want to change the database you&rsquo;re using, you can do that without changing Fluent, without changing Nodes, or the Droplet. All you have to do is change how your profile on the back-end.</p>\r\n\r\n<p><strong>[00:09:30] &ndash; Droplets</strong></p>\r\n\r\n<p>Vapor has different packages that are built into the Vapor library. The Droplet is the thing that you create. You instantiate one of those. That&rsquo;s the web server and you can attach handlers for URL&rsquo;s for routing to it, etc. It&rsquo;s a top level application where everything else goes through.</p>\r\n\r\n<p>Actually, between 1.5 and 2, they&rsquo;ve made some improvements to the structure of it, as well. In 1.5, they have a lot of things in their main .swift file. And now, it&rsquo;s really down to 6 lines of code. They have everything partitioned out.</p>\r\n\r\n<p><strong>[00:</strong> <strong>11:05] &ndash; Vapor is modular</strong></p>\r\n\r\n<p>That is one reason why Bob thinks Vapor is going to outlast a lot of the other frameworks. You don&rsquo;t really have to use every part of it. It also allows you to add-in whichever tool you need. Everything&rsquo;s modular.</p>\r\n\r\n<p><strong>[00:</strong> <strong>12:50] &ndash; Who&rsquo;s behind Vapor?</strong></p>\r\n\r\n<p>They&rsquo;re called Node. They&rsquo;re based out of London. They&rsquo;ve been financing the Vapor project early on. But it was Tanner Nelson and Logan Wright who founded it. They&rsquo;re still both heading it.</p>\r\n\r\n<p><strong>[00:</strong> <strong>14:25] &ndash; Tools to create new Vapor project</strong></p>\r\n\r\n<p>It&rsquo;s really simple if you can break into a terminal. You will have to download Vapor. You have one command for Vapor. It constructs a framework for you. Vapor xcode will create your Xcode build file. If you check on the run schema to your Mac, you can just run it as a server straight to Xcode.</p>\r\n\r\n<p><strong>[00:</strong> <strong>18:25] &ndash; Validation, Authentication</strong></p>\r\n\r\n<p>They have this validation tool that fully manages Swift&rsquo;s protocols. The authentication is also there. It helps you to connect securely with your users. It&rsquo;s not in their 2.0 docs but the 1.5 web sockets are still compatible with Vapor 2.0.</p>\r\n\r\n<p><strong>[00:</strong> <strong>21:30] &ndash; Web app deployment</strong></p>\r\n\r\n<p>Vapor does have support for Heroku. That&rsquo;s one of the first deployment options that they have. But using Ubuntu server is going to be the better option down that road. Heroku is good but it&rsquo;s not something you have that much control when it comes to scaling. If you ever need to deploy something larger, to a cloud-based ecosystem, try to figure out Ubuntu, try to figure out better ways to deploy it. Heroku used to be the only deployment option that they offer but now they have Nginx and Supervisor.</p>\r\n\r\n<p>There&rsquo;s a build pack for Heroku that is on Github. Just point the Heroku command line tool to the build pack on Github and it figures out what needs to be done. Digital Ocean also has an option that&rsquo;s using Docker. Docker container probably uses any number of cloud hosting &ndash; Amazon, Azure.</p>\r\n\r\n<p><strong>[00:</strong> <strong>25:35] &ndash; Swift 4</strong></p>\r\n\r\n<p>They&rsquo;re expecting that this is going to be the first real stable build of Swift. If 4.0 is a stable build as people are expecting, that could be a really big deal for Vapor. You can see enterprise-level applications. They&rsquo;re talking about implementing that next year. It could lead to a full-stack Swift environment. We can see an environment where you have a full-stack that has no HTML, no CSS, and no JavaScript. It&rsquo;s just all Swift and possibly XML.</p>\r\n\r\n<p><strong>Picks</strong></p>\r\n\r\n<p><strong>Bob Snyder</strong></p>\r\n\r\n<ul>\r\n\t<li><a href=\"http://turing.cool/\">Podcast: Turing-Incomplete</a></li>\r\n</ul>\r\n\r\n<p><strong>Andrew Madsen</strong></p>\r\n\r\n<ul>\r\n\t<li><a href=\"https://wwdc.io/\">WWDC Mac app</a></li>\r\n</ul>\r\n\r\n<p><strong>Jaim Zuber</strong></p>\r\n\r\n<ul>\r\n\t<li>Blog post: Overview of Swift Serve-side Frameworks</li>\r\n</ul>\r\n"],"source":[{"_":"The iPhreaks Show","$":{"url":"http://iphreaksshow.com"}}],"guid":[{"_":"ac44ebff-669c-4f98-b7e5-6550dfde043a","$":{"isPermaLink":"false"}}],"itunes:author":[""],"itunes:subtitle":[""],"itunes:summary":["<h2 style=\"text-align: center;\"><strong>iPS 209: Vapor with Bob Snyder</strong></h2>\r\n\r\n<p>On today&#39;s episode of iPhreaks, Andrew Madsen and Jaim Zuber talk about Vapor<strong>&nbsp;</strong>with Bob Snyder. Bob is on the show today to discuss the structure of Vapor and web app deployment, etc. Don&#39;t miss this one!</p>\r\n\r\n<p><strong>[00:01:20] &ndash; Introduction on Vapor</strong></p>\r\n\r\n<p>Vapor is a server-side Swift framework. It came out two months after Swift became open-source. A couple of weeks ago, they just released Vapor 2.0. It&rsquo;s a big jump from 1.5. Swift has protocols and has incredible performance as compared to Objective-C and other languages like JavaScript. It deserves more attention.</p>\r\n\r\n<p><strong>[00:02:30] &ndash; Back-end development before Vapor</strong></p>\r\n\r\n<p>Bob is a former graphic designer. He went to a boot camp last year and made that career shift. The boot camp focused on Python and iOS but that was all front-end for apps.</p>\r\n\r\n<p>Right now, he is a full-stack developer for a start-up called Crew and he works on Objective-C and Python, and Python Django for the backend. You can deploy, build, and have a production-ready server-side Swift application but you probably want to keep it for a small to mid-size projects. It&rsquo;s not quite enterprise-level yet.</p>\r\n\r\n<p><strong>[00:03:35] &ndash; Swift vs. Python</strong></p>\r\n\r\n<p>Besides the curly brackets, Bob also loves the Swift protocols. With these protocols, you can apply pretty much different attributes to a class. Working with Xcode and protocols, it gives you good practices for building applications. It&rsquo;s also type-safe. When it comes to making variables, knowing that you&rsquo;re keeping the same type of values is very important. That&rsquo;s actually one of the reasons why the performance is better than JavaScript that isn&rsquo;t type-safe.</p>\r\n\r\n<p><strong>[00:04:45] &ndash; Projects with Vapor</strong></p>\r\n\r\n<p>Bob has a project with his friend, and they&rsquo;re making it open-source. It&rsquo;s a web-based application where you just insult your friends and maybe insult you back. It goes back and forth. In doing that, what allowed Bob to really explore is how easy it is to set up relationships for your database inside Swift versus something else like Python.</p>\r\n\r\n<p><strong>[00:05:40] &ndash; Structure of Vapor</strong></p>\r\n\r\n<p>You have the Droplet which is your entire application. It&rsquo;s where everything comes down to. That is your server. Everything else just kind of relates to that. You have the Vapor Nodes, which is going to be your central point for all of your data types. The real premise of the server is you have information that you take from outside, get request, you process them, and most of the time that you&rsquo;re sending it to the database or returning it without going to the database. Each one of those parts to this environment generally takes a lot of interaction to get information for one piece to the next. That&rsquo;s what vapor nodes kind of comes into play. It makes using that data very easy.</p>\r\n\r\n<p><strong>[00:06:30] &ndash; Node</strong></p>\r\n\r\n<p>A node is a class that has protocols built on top of it. If you want to return a JSON object with a request that you got, you can immediately spit out a JSON object. You get some information from the database. It&rsquo;s basically a converter that you can return almost any format that you will need inside of Vapor.</p>\r\n\r\n<p><strong>[00:08:25] &ndash; Fluent</strong></p>\r\n\r\n<p>Nodes interact with Fluent. It allows Vapor to communicate with whatever database you&rsquo;re using. It makes it easy to go from Vapor to a MySQL, a Postgre, or a MongoDB database. You can have a basic server. You&rsquo;re going to have the Droplet. You&rsquo;re going to have the information you want to get into a Node. And then, you&rsquo;re going to send that information to Fluent. Then, Fluent will communicate your profile of the database. That will send on to the actual database. If you want to change the database you&rsquo;re using, you can do that without changing Fluent, without changing Nodes, or the Droplet. All you have to do is change how your profile on the back-end.</p>\r\n\r\n<p><strong>[00:09:30] &ndash; Droplets</strong></p>\r\n\r\n<p>Vapor has different packages that are built into the Vapor library. The Droplet is the thing that you create. You instantiate one of those. That&rsquo;s the web server and you can attach handlers for URL&rsquo;s for routing to it, etc. It&rsquo;s a top level application where everything else goes through.</p>\r\n\r\n<p>Actually, between 1.5 and 2, they&rsquo;ve made some improvements to the structure of it, as well. In 1.5, they have a lot of things in their main .swift file. And now, it&rsquo;s really down to 6 lines of code. They have everything partitioned out.</p>\r\n\r\n<p><strong>[00:</strong> <strong>11:05] &ndash; Vapor is modular</strong></p>\r\n\r\n<p>That is one reason why Bob thinks Vapor is going to outlast a lot of the other frameworks. You don&rsquo;t really have to use every part of it. It also allows you to add-in whichever tool you need. Everything&rsquo;s modular.</p>\r\n\r\n<p><strong>[00:</strong> <strong>12:50] &ndash; Who&rsquo;s behind Vapor?</strong></p>\r\n\r\n<p>They&rsquo;re called Node. They&rsquo;re based out of London. They&rsquo;ve been financing the Vapor project early on. But it was Tanner Nelson and Logan Wright who founded it. They&rsquo;re still both heading it.</p>\r\n\r\n<p><strong>[00:</strong> <strong>14:25] &ndash; Tools to create new Vapor project</strong></p>\r\n\r\n<p>It&rsquo;s really simple if you can break into a terminal. You will have to download Vapor. You have one command for Vapor. It constructs a framework for you. Vapor xcode will create your Xcode build file. If you check on the run schema to your Mac, you can just run it as a server straight to Xcode.</p>\r\n\r\n<p><strong>[00:</strong> <strong>18:25] &ndash; Validation, Authentication</strong></p>\r\n\r\n<p>They have this validation tool that fully manages Swift&rsquo;s protocols. The authentication is also there. It helps you to connect securely with your users. It&rsquo;s not in their 2.0 docs but the 1.5 web sockets are still compatible with Vapor 2.0.</p>\r\n\r\n<p><strong>[00:</strong> <strong>21:30] &ndash; Web app deployment</strong></p>\r\n\r\n<p>Vapor does have support for Heroku. That&rsquo;s one of the first deployment options that they have. But using Ubuntu server is going to be the better option down that road. Heroku is good but it&rsquo;s not something you have that much control when it comes to scaling. If you ever need to deploy something larger, to a cloud-based ecosystem, try to figure out Ubuntu, try to figure out better ways to deploy it. Heroku used to be the only deployment option that they offer but now they have Nginx and Supervisor.</p>\r\n\r\n<p>There&rsquo;s a build pack for Heroku that is on Github. Just point the Heroku command line tool to the build pack on Github and it figures out what needs to be done. Digital Ocean also has an option that&rsquo;s using Docker. Docker container probably uses any number of cloud hosting &ndash; Amazon, Azure.</p>\r\n\r\n<p><strong>[00:</strong> <strong>25:35] &ndash; Swift 4</strong></p>\r\n\r\n<p>They&rsquo;re expecting that this is going to be the first real stable build of Swift. If 4.0 is a stable build as people are expecting, that could be a really big deal for Vapor. You can see enterprise-level applications. They&rsquo;re talking about implementing that next year. It could lead to a full-stack Swift environment. We can see an environment where you have a full-stack that has no HTML, no CSS, and no JavaScript. It&rsquo;s just all Swift and possibly XML.</p>\r\n\r\n<p><strong>Picks</strong></p>\r\n\r\n<p><strong>Bob Snyder</strong></p>\r\n\r\n<ul>\r\n\t<li><a href=\"http://turing.cool/\">Podcast: Turing-Incomplete</a></li>\r\n</ul>\r\n\r\n<p><strong>Andrew Madsen</strong></p>\r\n\r\n<ul>\r\n\t<li><a href=\"https://wwdc.io/\">WWDC Mac app</a></li>\r\n</ul>\r\n\r\n<p><strong>Jaim Zuber</strong></p>\r\n\r\n<ul>\r\n\t<li>Blog post: Overview of Swift Serve-side Frameworks</li>\r\n</ul>\r\n"],"itunes:duration":["32:10"],"enclosure":[{"$":{"url":"http://www.podtrac.com/pts/redirect.mp3/media.devchat.tv//iphreaks/iPS_209_Vapor_with_Bob_Snyder.mp3","length":"31181657","type":"audio/mpeg"}}]}